apiVersion: intersystems.com/v1alpha1
kind: IrisCluster
metadata:
  name: htapirisdb
spec:
  passwordHash: '071e3aa0c8810f91eefd8f074e3768b06c66308a,v7mf8dt5'
  licenseKeySecret:
    name: iris-key-secret
  topology:
    data:
      shards: 4
      mirrored: true
#      image: intersystemsdc/irisdemo-base-irisdb-community:version-1.4
#      image: intersystemsicm/iris:latest
      image: mc7913/irisdemo:irisdemo.iko_test01
#      image: intersystemsicm/iris:2020.3.0AA.331.0
      podTemplate:
        metadata:
          labels:
            iris-aa: iris-instance
        spec:
          metadata: 
            iris-aa: iris-instance
          imagePullSecrets:
            - name: dockerhub-secret
          tolerations:
          - key: "iris-group"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: "node-label"
                    operator: In
                    values:
                    - "iris"
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchExpressions:
                    - key: "iris-aa"
                      operator: "In"
                      values:
                      - "iris-instance"                      
      updateStrategy:
        type: RollingUpdate
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            cpu: 0.8
            storage: 100G
        storageClassName: aws-storage-class
  serviceTemplate:
    spec:
      type: LoadBalancer
